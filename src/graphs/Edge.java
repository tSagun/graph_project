package graphs;

import java.util.Objects;

/**
 * Represents a directed edge in a graph.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 * @param <V> the type of the vertices
 */
public class Edge<V>
{
    private V source;
    private V destination;
    private int weight;

    /**
     * Creates a new edge.
     *
     * @param source the source vertex
     * @param destination the destination vertex
     * @param weight the weight of the edge
     */
    public Edge(V source, V destination, int weight)
    {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }

    /**
     * Getter for the source vertex.
     * @return the source vertex
     */
    public V getSource()
    {
        return source;
    }

    /**
     * Getter for the destination vertex.
     * @return the destination vertex
     */
    public V getDestination()
    {
        return destination;
    }

    /**
     * Getter for the edge weight.
     * @return the edge weight
     */
    public int getWeight()
    {
        return weight;
    }

    @Override
    public boolean equals(Object other)
    {
        if (this == other)
        {
            return true;
        }
        if (other == null || getClass() != other.getClass())
        {
            return false;
        }
        Edge<?> edge = (Edge<?>) other;
        return Objects.equals(source, edge.source) &&
                Objects.equals(destination, edge.destination);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(source, destination);
    }

    @Override
    public String toString()
    {
        return "" + source + " => " + destination + " (" + weight + ")";
    }
}
